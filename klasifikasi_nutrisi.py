# -*- coding: utf-8 -*-
"""Klasifikasi Nutrisi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Nr1OfM0oRc8KvCvWcz4TAxcisNoZb3C
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.utils.multiclass import unique_labels

# Upload file kaggle.json yang berisi API Key
from google.colab import files
files.upload()

# Simpan kaggle.json ke direktori yang sesuai
import os
os.makedirs('/root/.kaggle', exist_ok=True)
!cp kaggle.json /root/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

#Download dataset dari Kaggle
!kaggle datasets download -d anasfikrihanif/indonesian-food-and-drink-nutrition-dataset

# Ekstrak file zip
!unzip -q indonesian-food-and-drink-nutrition-dataset.zip -d nutrition_dataset

df = pd.read_csv('/content/nutrition_dataset/nutrition.csv')
df.head()

df.drop('id', axis=1, inplace=True)

df.info()

import matplotlib.pyplot as plt
import seaborn as sns

# Create box plots for 'calories', 'proteins', 'fat', and 'carbohydrate'
plt.figure(figsize=(12, 6))

plt.subplot(2, 2, 1)
sns.boxplot(y=df['calories'])
plt.title('Calories Distribution')

plt.subplot(2, 2, 2)
sns.boxplot(y=df['proteins'])
plt.title('Proteins Distribution')

plt.subplot(2, 2, 3)
sns.boxplot(y=df['fat'])
plt.title('Fat Distribution')

plt.subplot(2, 2, 4)
sns.boxplot(y=df['carbohydrate'])
plt.title('Carbohydrate Distribution')

plt.tight_layout()
plt.show()

def classify_calories(value):
    if value <= 100:
        return 'Rendah'
    elif value <= 200:
        return 'Sedang'
    else:
        return 'Tinggi'

def classify_protein(value):
    if value <= 5:
        return 'Rendah'
    elif value <= 10:
        return 'Sedang'
    else:
        return 'Tinggi'

def classify_fat(value):
    if value <= 5:
        return 'Rendah'
    elif value <= 15:
        return 'Sedang'
    else:
        return 'Tinggi'

def classify_carbohydrate(value):
    if value <= 10:
        return 'Rendah'
    elif value <= 20:
        return 'Sedang'
    else:
        return 'Tinggi'

# Mengklasifikasikan nilai gizi sesuai kategori tetap
df['calories_category'] = df['calories'].apply(classify_calories)
df['proteins_category'] = df['proteins'].apply(classify_protein)
df['fat_category'] = df['fat'].apply(classify_fat)
df['carbohydrate_category'] = df['carbohydrate'].apply(classify_carbohydrate)

# Melihat distribusi
for nutrient in ['calories', 'proteins', 'fat', 'carbohydrate']:
    print(f'Distribusi {nutrient}:')
    print(df[f'{nutrient}_category'].value_counts())
    print()

df.head()

df.drop(['image'], axis=1, inplace=True)

df.head()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt
from itertools import product

# Fungsi klasifikasi yang lebih fleksibel berdasarkan kombinasi kategori
category_map = {
    #calories_category, proteins_category, fat_category, carbohydrate_category
    ('Rendah', 'Tinggi', 'Rendah', 'Sedang'): 'Sehat',
    ('Sedang', 'Sedang', 'Sedang', 'Sedang'): 'Bergizi',
    ('Tinggi', 'Tinggi', 'Tinggi', 'Tinggi'): 'Tinggi Energi',
    ('Rendah', 'Rendah', 'Rendah', 'Rendah'): 'Tidak Sehat',
    ('Tinggi', 'Sedang', 'Rendah', 'Sedang'): 'Tinggi Kalori',
    ('Sedang', 'Tinggi', 'Rendah', 'Rendah'): 'Tinggi Protein',
    ('Sedang', 'Rendah', 'Tinggi', 'Rendah'): 'Tinggi Lemak',
    ('Sedang', 'Rendah', 'Rendah', 'Tinggi'): 'Tinggi Karbohidrat',
    ('Rendah', 'Tinggi', 'Rendah', 'Rendah'): 'Diet Rendah Lemak',
    ('Sedang', 'Tinggi', 'Sedang', 'Rendah'): 'Diet Rendah Karbohidrat',
    ('Sedang', 'Rendah', 'Rendah', 'Tinggi'): 'Diet Tinggi Serat',
    ('Rendah', 'Rendah', 'Rendah', 'Sedang'): 'Rendah Kalori & Karbo',
    ('Rendah', 'Rendah', 'Sedang', 'Rendah'): 'Rendah Kalori & Protein',
    ('Rendah', 'Rendah', 'Sedang', 'Sedang'): 'Rendah Lemak & Kalori',
    ('Rendah', 'Sedang', 'Rendah', 'Rendah'): 'Rendah Karbo & Kalori',
    ('Rendah', 'Sedang', 'Rendah', 'Sedang'): 'Rendah Lemak, Kalori, Karbo',
    ('Rendah', 'Sedang', 'Sedang', 'Rendah'): 'Rendah Karbo & Tinggi Lemak',
    ('Rendah', 'Sedang', 'Sedang', 'Sedang'): 'Rendah Kalori, Tinggi Lemak, Protein',
    ('Sedang', 'Rendah', 'Rendah', 'Rendah'): 'Rendah Gizi Umum',
    ('Sedang', 'Rendah', 'Rendah', 'Sedang'): 'Tinggi Karbo, Rendah Gizi',
    ('Sedang', 'Rendah', 'Sedang', 'Rendah'): 'Tinggi Lemak, Rendah Protein & Karbo',
    ('Sedang', 'Rendah', 'Sedang', 'Sedang'): 'Tinggi Lemak & Karbo',
    ('Sedang', 'Sedang', 'Rendah', 'Rendah'): 'Seimbang Rendah Lemak & Karbo',
    ('Sedang', 'Sedang', 'Rendah', 'Sedang'): 'Rendah Lemak, Seimbang lainnya',
    ('Sedang', 'Sedang', 'Sedang', 'Rendah'): 'Rendah Karbo, Seimbang lainnya',
}

# Fungsi untuk menentukan kategori makanan secara otomatis
def kategori_makanan(calories_category, proteins_category, fat_category, carbohydrate_category):
    key = (calories_category, proteins_category, fat_category, carbohydrate_category)

    # Kategori default jika kombinasi tidak ada dalam peta
    if key not in category_map:
        if calories_category == 'Tinggi':
            return 'Tinggi Kalori'
        elif proteins_category == 'Tinggi':
            return 'Tinggi Protein'
        elif fat_category == 'Tinggi':
            return 'Tinggi Lemak'
        elif carbohydrate_category == 'Tinggi':
            return 'Tinggi Karbohidrat'
        else:
            return 'Lainnya'

    return category_map[key]



# Menggunakan data yang sudah ada
df['category'] = df.apply(lambda row: kategori_makanan(row['calories_category'], row['proteins_category'], row['fat_category'], row['carbohydrate_category']), axis=1)

# Melihat distribusi kategori
print(df['category'].value_counts())

# Melihat kombinasi yang menghasilkan kategori 'Lainnya'
kategori_list = ['Rendah', 'Sedang', 'Tinggi']
semua_kombinasi = list(product(kategori_list, repeat=4))

print("Kombinasi Kategori yang Termasuk 'Lainnya':")
for kombinasi in semua_kombinasi:
    if kategori_makanan(*kombinasi) == 'Lainnya':
        print(f"{kombinasi}: {kategori_makanan(*kombinasi)}")

df.head()

# Kolom input dan target
features = ['calories_category', 'proteins_category', 'fat_category', 'carbohydrate_category']
target = 'category'

# Label Encoding untuk fitur dan target
encoders = {}
for col in features + [target]:
    enc = LabelEncoder()
    df[col] = enc.fit_transform(df[col])
    encoders[col] = enc

# Split data
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Latih model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluasi
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f" Akurasi: {acc:.4f}")

labels = unique_labels(y, y_pred)
print(classification_report(
    y_test,
    y_pred,
    labels=labels,
    target_names=encoders[target].inverse_transform(labels)
))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(12, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap="Blues", xticklabels=encoders[target].classes_, yticklabels=encoders[target].classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# Memastikan kolom 'name' berada di posisi pertama
cols = df.columns.tolist()
cols.insert(0, cols.pop(cols.index('name')))
df = df[cols]

# Simpan ke CSV
csv_path = "dataset_kategori_makanan.csv"
df.to_csv(csv_path, index=False, encoding='utf-8')